<?php

/**
 * @file
 * Install file for HistoricalSurvey Survey module, based on Node Example
 *
 * The definition of the fields for the module is here,
 *
 * @see http://drupal.org/node/707832
 * @see http://drupal.org/node/443536
 * @see field
 */

/**
 * Implements hook_install().
 *
 * This hook is called when the user enables the module for the first time
 * (or on subsequent enables after the module has been uninstalled). So it's
 * a good place to define our new node type.
 *
 * We will:
 * - Add the body field.
 * - Configure the body field.
 * - Create color, quantity, and image fields.
 * - Create color, quantity, and image instances.
 *
 * @see node_type_set_defaults()
 * @see field_info_instance()
 * @see field_update_instance()
 * @see field_create_field()
 * @see field_create_instance()
 * @ingroup place
 */
function historicalsurvey_survey_install() {
  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.
  $t = get_t();

  // We define the node type as an associative array.
  $content = array(
    'type' => 'survey',
    'name' => $t('Survey'),
    // 'base' tells Drupal the base string for hook functions.
    // This is often the module name; if base is set to 'mymodule', Drupal
    // would call mymodule_insert() or similar for node hooks.
    // In this case, we set base equal to 'node_content' so Drupal will handle
    // our node as if we had designed it in the UI.
    'base' => 'node_content',
    'description' => $t('Survey Effort'),
    'title_label' => $t('Name of Survey Effort'),
    'custom' => TRUE,
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($content);

  //We add a body field and set the body label immediately.
  //node_add_body_field($content_type, $t('Example Description'));

  // Save the content type
  node_type_save($content_type);

  //Save our custom fields as a persistant variable for other modules  
  $custom_fields = array(
    'historicalsurvey_text_singleline' => array(
      'survey_name' => 'Survey Effort Name',
    ),
    'historicalsurvey_text_multiline' => array(
      'survey_boundaries' => 'Survey Effort Boundaries',
      'survey_description' => 'Description about Survey Effort',
    ),
  );
  variable_set('historicalsurvey_survey_custom_fields', $custom_fields);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (historicalsurvey_survey_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (historicalsurvey_survey_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $content['type'];
    field_create_instance($instance);
  }
}
/**
 * Implements hook_uninstall().
 *
 * This hook is called when the user not only has disabled the module,
 * but also uninstalls it from the 'uninstall' tab in the module page.
 *
 * So it's a perfect time to remove our fields and instances and new
 * node type from the database.
 *
 * @ingroup place
 */
function historicalsurvey_survey_uninstall() {
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'survey'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(historicalsurvey_survey_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the survey
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'survey');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('survey');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is factored into this function so it can be used in both
 * historicalsurvey_survey_install() and historicalsurvey_survey_uninstall().
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 *
 * @ingroup place
 */
function historicalsurvey_survey_installed_fields() {
  $t = get_t();
  //basic fields with basic field types
  $installed_fields = array(
    'field_survey_team_captian' => array(
      'field_name' => 'field_survey_team_captian',
      'cardinality' => -1,
      'type' => 'historicalsurvey_user_reference',
      'settings' => array(
        'referenceable_types' => array(
          'user' => 'user',
        ),
      ),
    ),
    'field_survey_team_member' => array(
      'field_name' => 'field_survey_team_member',
      'cardinality' => -1,
      'type' => 'historicalsurvey_user_reference',
      'settings' => array(
        'referenceable_types' => array(
          'user' => 'user',
        ),
      ),
    ),
    'field_survey_state' => array(
      'field_name' => 'field_survey_state',
      'cardinality' => 1,
      'type' => 'historicalsurvey_term_reference',
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'survey_state',
          ),
        ),
      ),
    ),
    'field_survey_description' => array(
      'field_name' => 'field_survey_description',
      'cardinality' => 1,
      'type' => 'historicalsurvey_text',
      'settings' => array(
        'rows' => 10,
      ),
    ),
    'field_survey_reference' => array(
      'field_name' => 'field_survey_reference',
      'cardinality' => 1,
      'type' => 'historicalsurvey_text',
      'settings' => array(
        'rows' => 10,
      ),
    ),
  );

  return $installed_fields;
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "historicalsurvey_survey_list" view mode.
 *
 * This is factored into this function so it can be used in both
 * historicalsurvey_survey_install() and historicalsurvey_survey_uninstall().
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 *
 * @ingroup place
 */
function historicalsurvey_survey_installed_instances() {
  $t = get_t();

  //basic fields with basic field types
  $instances = array(
    'field_geo' => array(
      'field_name' => 'field_geo',
      'label' => $t('Geo'),
      'widget' => array(
        'type' => 'historicalsurvey_geofield_widget',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'default',
        ),
      ),
    ),
    'field_survey_team_captian' => array(
      'field_name' => 'field_survey_team_captian',
      'label' => $t('Survey Team Captians'),
      'required' => FALSE,
      'widget' => array(
        'type' => 'historicalsurvey_user_reference_widget',
        'settings' => array(
          'autocomplete_match' => 'contains',
          'size' => 60,
          'autocomplete_path' => 'user_reference/autocomplete',
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'default',
        ),
      ),
    ),
    'field_survey_team_member' => array(
      'field_name' => 'field_survey_team_member',
      'label' => $t('Survey Team Members'),
      'required' => FALSE,
      'widget' => array(
        'type' => 'historicalsurvey_user_reference_widget',
        'settings' => array(
          'autocomplete_match' => 'contains',
          'size' => 60,
          'autocomplete_path' => 'user_reference/autocomplete',
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'default',
        ),
      ),
    ),
    'field_survey_state' => array(
      'field_name' => 'field_survey_state',
      'label' => $t('Survey Effort State'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'historicalsurvey_term_reference_widget',
        'settings' => array(
          'autocomplete_match' => 'contains',
          'size' => 60,
          'autocomplete_path' => 'historicalsurvey_term_reference/autocomplete',
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'default',
        ),
      ),
    ),
    'field_tag' => array(
      'field_name' => 'field_tag',
      'label' => $t('Tag(s)'),
      'required' => FALSE,
      'widget' => array(
        'type' => 'historicalsurvey_term_reference_widget',
        'settings' => array(
          'autocomplete_match' => 'contains',
          'size' => 60,
          'autocomplete_path' => 'historicalsurvey_term_reference/autocomplete',
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'default',
        ),
      ),
    ),
    'field_survey_description' => array(
      'field_name' => 'field_survey_description',
      'label' => $t('Survey Effort Description'),
      'required' => FALSE,
      'widget' => array(
        'type' => 'historicalsurvey_text_widget',
        'settings' => array(
          'size' => 6,
          'rows' => 1,
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'default',
        ),
      ),
      'settings' => array(
        'text_processing' => FALSE,
      ),
    ),
    'field_survey_reference' => array(
      'field_name' => 'field_survey_reference',
      'label' => $t('References'),
      'required' => FALSE,
      'widget' => array(
        'type' => 'historicalsurvey_text_widget',
        'settings' => array(
          'size' => 6,
          'rows' => 1,
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'default',
        ),
      ),
      'settings' => array(
        'text_processing' => FALSE,
      ),
    ),
  );
  return $instances;
}
